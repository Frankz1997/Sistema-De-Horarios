/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

// This file provides a simple key-value interface for storing data.
import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const client = () => createClient(
  Deno.env.get("SUPABASE_URL"),
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);

// Set stores a key-value pair in the database.
export const set = async (key, value) => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_9aeea470").upsert({
    key,
    value
  });
  if (error) {
    throw new Error(error.message);
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key) => {
  const supabase = client();
  const { data, error } = await supabase.from("kv_store_9aeea470").select("value").eq("key", key).maybeSingle();
  if (error) {
    throw new Error(error.message);
  }
  return data?.value;
};

// Delete deletes a key-value pair from the database.
export const del = async (key) => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_9aeea470").delete().eq("key", key);
  if (error) {
    throw new Error(error.message);
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys, values) => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_9aeea470").upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
  if (error) {
    throw new Error(error.message);
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys) => {
  const supabase = client();
  const { data, error } = await supabase.from("kv_store_9aeea470").select("value").in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d) => d.value) ?? [];
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys) => {
  const supabase = client();
  const { error } = await supabase.from("kv_store_9aeea470").delete().in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix) => {
  const supabase = client();
  const { data, error } = await supabase.from("kv_store_9aeea470").select("key, value").like("key", prefix + "%");
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d) => d.value) ?? [];
};